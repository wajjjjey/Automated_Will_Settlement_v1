/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface WillProtocolInterface extends utils.Interface {
  functions: {
    "confirmations(address)": FunctionFragment;
    "countApprovals(address)": FunctionFragment;
    "createWill(address[],uint256[],address[],address[],string[],string[],address[])": FunctionFragment;
    "executeWill(address)": FunctionFragment;
    "executorContract(address)": FunctionFragment;
    "executorSignatures(address,address)": FunctionFragment;
    "getWillExecutorData(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "submitExecutorSignature(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "willExecutor()": FunctionFragment;
    "wills(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "confirmations"
      | "countApprovals"
      | "createWill"
      | "executeWill"
      | "executorContract"
      | "executorSignatures"
      | "getWillExecutorData"
      | "owner"
      | "renounceOwnership"
      | "submitExecutorSignature"
      | "transferOwnership"
      | "willExecutor"
      | "wills"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "confirmations",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "countApprovals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createWill",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWill",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executorContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executorSignatures",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWillExecutorData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitExecutorSignature",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "willExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wills",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createWill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeWill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executorContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executorSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWillExecutorData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitExecutorSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "willExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wills", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WillProtocol extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WillProtocolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    confirmations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    countApprovals(
      testator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createWill(
      _executors: PromiseOrValue<string>[],
      _tokenAmounts: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      _tokenRecipients: PromiseOrValue<string>[],
      assetNames: PromiseOrValue<string>[],
      assetDescriptions: PromiseOrValue<string>[],
      _nftRecipients: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeWill(
      testator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executorContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    executorSignatures(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getWillExecutorData(
      testator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitExecutorSignature(
      testator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    willExecutor(overrides?: CallOverrides): Promise<[string]>;

    wills(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isConfirmed: boolean }>;
  };

  confirmations(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countApprovals(
    testator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createWill(
    _executors: PromiseOrValue<string>[],
    _tokenAmounts: PromiseOrValue<BigNumberish>[],
    _tokenAddresses: PromiseOrValue<string>[],
    _tokenRecipients: PromiseOrValue<string>[],
    assetNames: PromiseOrValue<string>[],
    assetDescriptions: PromiseOrValue<string>[],
    _nftRecipients: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeWill(
    testator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executorContract(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  executorSignatures(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getWillExecutorData(
    testator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitExecutorSignature(
    testator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  willExecutor(overrides?: CallOverrides): Promise<string>;

  wills(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    confirmations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countApprovals(
      testator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createWill(
      _executors: PromiseOrValue<string>[],
      _tokenAmounts: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      _tokenRecipients: PromiseOrValue<string>[],
      assetNames: PromiseOrValue<string>[],
      assetDescriptions: PromiseOrValue<string>[],
      _nftRecipients: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeWill(
      testator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executorContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    executorSignatures(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getWillExecutorData(
      testator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    submitExecutorSignature(
      testator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    willExecutor(overrides?: CallOverrides): Promise<string>;

    wills(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    confirmations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countApprovals(
      testator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createWill(
      _executors: PromiseOrValue<string>[],
      _tokenAmounts: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      _tokenRecipients: PromiseOrValue<string>[],
      assetNames: PromiseOrValue<string>[],
      assetDescriptions: PromiseOrValue<string>[],
      _nftRecipients: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeWill(
      testator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executorContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executorSignatures(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWillExecutorData(
      testator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitExecutorSignature(
      testator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    willExecutor(overrides?: CallOverrides): Promise<BigNumber>;

    wills(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    confirmations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countApprovals(
      testator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createWill(
      _executors: PromiseOrValue<string>[],
      _tokenAmounts: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      _tokenRecipients: PromiseOrValue<string>[],
      assetNames: PromiseOrValue<string>[],
      assetDescriptions: PromiseOrValue<string>[],
      _nftRecipients: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeWill(
      testator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executorContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executorSignatures(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWillExecutorData(
      testator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitExecutorSignature(
      testator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    willExecutor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wills(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
